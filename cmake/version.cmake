#-----------------------------------------------------------------------------
#
# Get the VCS version from GIT and store it in the variable
# PROJECT_VERSION_VCS and PROJECT_VERSION_VCS_LONG.
# Store the origin in PROJECT_ORIGIN_VCS_URL.
#

IF(CMAKE_VERSION VERSION_LESS 3.12.0)
	FIND_PACKAGE(PythonInterp 3 REQUIRED)
ELSE(CMAKE_VERSION VERSION_LESS 3.12.0)
	FIND_PACKAGE(Python3 REQUIRED COMPONENTS Interpreter)
ENDIF(CMAKE_VERSION VERSION_LESS 3.12.0)
FIND_PACKAGE(Git)

IF(GIT_FOUND)
	EXECUTE_PROCESS(COMMAND "${PYTHON_INTERPRETER}" "${CMAKE_HOME_DIRECTORY}/mbs/site_scons/version.py" "${CMAKE_HOME_DIRECTORY}" --git="${GIT_EXECUTABLE}"
	                RESULT_VARIABLE VCS_VERSION_RESULT
	                OUTPUT_VARIABLE VCS_VERSION_OUTPUT)


	IF(VCS_VERSION_RESULT EQUAL 0)
		STRING(STRIP "${VCS_VERSION_OUTPUT}" VCS_VERSION_OUTPUT_STRIP)

		STRING(REGEX MATCH "^([^,]+),([^,]+),(.+)$" MATCH ${VCS_VERSION_OUTPUT_STRIP})
		IF(NOT MATCH STREQUAL "")
			# Get the values from the matches.
			SET(PROJECT_VERSION_VCS "${CMAKE_MATCH_1}")
			SET(PROJECT_VERSION_VCS_LONG "${CMAKE_MATCH_2}")
			SET(PROJECT_ORIGIN_VCS_URL "${CMAKE_MATCH_3}")
		ELSE(NOT MATCH STREQUAL "")
			# Set all fields to unknown.
			SET(PROJECT_VERSION_VCS "unknown")
			SET(PROJECT_VERSION_VCS_LONG "unknown")
			SET(PROJECT_ORIGIN_VCS_URL "unknown")
		ENDIF(NOT MATCH STREQUAL "")
	ELSE(VCS_VERSION_RESULT EQUAL 0)
		# The GIT command failed. Set the VCS version to "unknown".
		SET(PROJECT_VERSION_VCS "unknown")
		SET(PROJECT_VERSION_VCS_LONG "unknown")
		SET(PROJECT_ORIGIN_VCS_URL "unknown")
	ENDIF(VCS_VERSION_RESULT EQUAL 0)

ELSE(GIT_FOUND)
	# No GIT tool found. Set all results to "unknown".
	SET(PROJECT_VERSION_VCS "unknown")
	SET(PROJECT_VERSION_VCS_LONG "unknown")
	SET(PROJECT_ORIGIN_VCS_URL "unknown")
ENDIF(GIT_FOUND)

MESSAGE("PROJECT_VERSION_VCS: ${PROJECT_VERSION_VCS}")
MESSAGE("PROJECT_VERSION_VCS_LONG: ${PROJECT_VERSION_VCS_LONG}")
MESSAGE("PROJECT_ORIGIN_VCS_URL: ${PROJECT_ORIGIN_VCS_URL}")
