# -*- coding: utf-8 -*-
#-------------------------------------------------------------------------#
#   Copyright (C) 2011 by Christoph Thelen                                #
#   doc_bacardi@users.sourceforge.net                                     #
#                                                                         #
#   This program is free software; you can redistribute it and/or modify  #
#   it under the terms of the GNU General Public License as published by  #
#   the Free Software Foundation; either version 2 of the License, or     #
#   (at your option) any later version.                                   #
#                                                                         #
#   This program is distributed in the hope that it will be useful,       #
#   but WITHOUT ANY WARRANTY; without even the implied warranty of        #
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         #
#   GNU General Public License for more details.                          #
#                                                                         #
#   You should have received a copy of the GNU General Public License     #
#   along with this program; if not, write to the                         #
#   Free Software Foundation, Inc.,                                       #
#   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             #
#-------------------------------------------------------------------------#


#----------------------------------------------------------------------------
#
# Import the default compiler environments and the platform libraries.
#
Import('atEnv')
Import('libmi_netx500', 'libmi_netx56', 'libmi_netx50', 'libmi_netx10', 'libmi_netx4000')
import os.path


#----------------------------------------------------------------------------
# This is the list of sources. The elements must be separated with whitespace
# (i.e. spaces, tabs, newlines). The amount of whitespace does not matter.
sources_monitor = """
	src/init_netx_test.S
	src/main.c
	src/uart.c
"""


sources_bootstrap = """
	src/bootstrap_init.S
	src/bootstrap.c
"""


sources_monitor_netx500 = """
	src/transport.c
"""

sources_monitor_netx56 = """
	src/netx56/netx56_usb_uart.c
	src/netx56/transport.c
"""

sources_monitor_netx50 = """
	src/netx50/transport.c
	src/netx50/usb.c
	src/netx50/usb_descriptors.c
	src/netx50/usb_globals.c
	src/netx50/usb_io.c
	src/netx50/usb_requests_top.c
"""

sources_monitor_netx10 = """
	src/transport.c
"""

sources_monitor_netx4000 = """
	src/netx4000/transport.c
"""


strTargetPath = Dir('#targets/plugins/romloader/uart/netx').get_path()


#----------------------------------------------------------------------------
#
# Build the netX500 files.
#
env_netx500_monitor = atEnv.NETX500.Clone()
env_netx500_monitor.Append(CPPPATH = ['src', '../../machine_interface/netx/src', '#platform/src', '#platform/src/lib'])
env_netx500_monitor.Replace(LDFILE = File('src/netx500/netx500.ld'))
src_netx500_monitor = env_netx500_monitor.SetBuildPath(os.path.join(strTargetPath, 'netx500_monitor'), 'src', sources_monitor + sources_monitor_netx500)
elf_netx500_monitor = env_netx500_monitor.Elf(os.path.join(strTargetPath, 'uartmon_netx500_monitor.elf'), src_netx500_monitor + env_netx500_monitor['PLATFORM_LIBRARY'] + libmi_netx500)
bin_netx500_monitor = env_netx500_monitor.ObjCopy(os.path.join(strTargetPath, 'uartmon_netx500_monitor.bin'), elf_netx500_monitor)
UARTMON_NETX500 = env_netx500_monitor.DataArray(os.path.join(strTargetPath, 'uartmon_netx500_monitor.c'), bin_netx500_monitor, DATAARRAY_NAME='auc_uartmon_netx500_monitor')
UARTMON_NETX500_SYM = env_netx500_monitor.GccSymbolTemplate(os.path.join(strTargetPath, 'uartmon_netx500_monitor_run.h'), elf_netx500_monitor, GCCSYMBOLTEMPLATE_TEMPLATE=File('templates/uartmon_netx500_monitor_run.h'))
Export('UARTMON_NETX500', 'UARTMON_NETX500_SYM')

#----------------------------------------------------------------------------
#
# Build the netX56 files.
#
env_netx56_monitor = atEnv.NETX56.Clone()
env_netx56_monitor.Append(CPPPATH = ['src', '../../machine_interface/netx/src', '#platform/src', '#platform/src/lib'])
env_netx56_monitor.Replace(LDFILE = File('src/netx56/netx56.ld'))
src_netx56_monitor = env_netx56_monitor.SetBuildPath(os.path.join(strTargetPath, 'netx56_monitor'), 'src', sources_monitor + sources_monitor_netx56)
elf_netx56_monitor = env_netx56_monitor.Elf(os.path.join(strTargetPath, 'uartmon_netx56_monitor.elf'), src_netx56_monitor + env_netx56_monitor['PLATFORM_LIBRARY'] + libmi_netx56)
bin_netx56_monitor = env_netx56_monitor.ObjCopy(os.path.join(strTargetPath, 'uartmon_netx56_monitor.bin'), elf_netx56_monitor)
UARTMON_NETX56 = env_netx56_monitor.DataArray(os.path.join(strTargetPath, 'uartmon_netx56_monitor.c'), bin_netx56_monitor, DATAARRAY_NAME='auc_uartmon_netx56_monitor')
UARTMON_NETX56_SYM = env_netx56_monitor.GccSymbolTemplate(os.path.join(strTargetPath, 'uartmon_netx56_monitor_run.h'), elf_netx56_monitor, GCCSYMBOLTEMPLATE_TEMPLATE=File('templates/uartmon_netx56_monitor_run.h'))
Export('UARTMON_NETX56', 'UARTMON_NETX56_SYM')

#----------------------------------------------------------------------------
#
# Build the netX50 files.
#
env_netx50_monitor = atEnv.NETX50.Clone()
env_netx50_monitor.Append(CPPPATH = ['src', '../../machine_interface/netx/src', '#platform/src', '#platform/src/lib'])
env_netx50_monitor.Replace(LDFILE = File('src/netx50/netx50.ld'))
src_netx50_monitor = env_netx50_monitor.SetBuildPath(os.path.join(strTargetPath, 'netx50_monitor'), 'src', sources_monitor + sources_monitor_netx50)
elf_netx50_monitor = env_netx50_monitor.Elf(os.path.join(strTargetPath, 'uartmon_netx50_monitor.elf'), src_netx50_monitor + env_netx50_monitor['PLATFORM_LIBRARY'] + libmi_netx50)
bin_netx50_monitor = env_netx50_monitor.ObjCopy(os.path.join(strTargetPath, 'uartmon_netx50_monitor.bin'), elf_netx50_monitor)
UARTMON_NETX50 = env_netx50_monitor.DataArray(os.path.join(strTargetPath, 'uartmon_netx50_monitor.c'), bin_netx50_monitor, DATAARRAY_NAME='auc_uartmon_netx50_monitor')
UARTMON_NETX50_SYM = env_netx50_monitor.GccSymbolTemplate(os.path.join(strTargetPath, 'uartmon_netx50_monitor_run.h'), elf_netx50_monitor, GCCSYMBOLTEMPLATE_TEMPLATE=File('templates/uartmon_netx50_monitor_run.h'))
Export('UARTMON_NETX50', 'UARTMON_NETX50_SYM')

env_netx50_bootstrap = atEnv.NETX50_THUMB.Clone()
env_netx50_bootstrap.Replace(LDFILE = File('src/netx50/netx50_bootstrap.ld'))
env_netx50_bootstrap.Append(CPPPATH = ['src', '../../machine_interface/netx/src', '#platform/src', '#platform/src/lib', '#targets/plugins/romloader/uart/netx'])
src_netx50_bootstrap = env_netx50_bootstrap.SetBuildPath(os.path.join(strTargetPath, 'netx50_bootstrap'), 'src', sources_bootstrap)
elf_netx50_bootstrap = env_netx50_bootstrap.Elf(os.path.join(strTargetPath, 'uartmon_netx50_bootstrap.elf'), src_netx50_bootstrap)
bin_netx50_bootstrap = env_netx50_bootstrap.ObjCopy(os.path.join(strTargetPath, 'uartmon_netx50_bootstrap.bin'), elf_netx50_bootstrap)
UARTMON_NETX50_BOOTSTRAP = env_netx50_bootstrap.DataArray(os.path.join(strTargetPath, 'uartmon_netx50_bootstrap.c'), bin_netx50_bootstrap, DATAARRAY_NAME='auc_uartmon_netx50_bootstrap')
UARTMON_NETX50_BOOTSTRAP_SYM = env_netx50_bootstrap.GccSymbolTemplate(os.path.join(strTargetPath, 'uartmon_netx50_bootstrap_run.h'), elf_netx50_bootstrap, GCCSYMBOLTEMPLATE_TEMPLATE=File('templates/uartmon_netx50_bootstrap_run.h'))
Export('UARTMON_NETX50_BOOTSTRAP', 'UARTMON_NETX50_BOOTSTRAP_SYM')

#----------------------------------------------------------------------------
#
# Build the netX10 files.
#
env_netx10_monitor = atEnv.NETX10.Clone()
env_netx10_monitor.Append(CPPPATH = ['src', '../../machine_interface/netx/src', '#platform/src', '#platform/src/lib'])
env_netx10_monitor.Replace(LDFILE = File('src/netx10/netx10.ld'))
src_netx10_monitor = env_netx10_monitor.SetBuildPath(os.path.join(strTargetPath, 'netx10_monitor'), 'src', sources_monitor + sources_monitor_netx10)
elf_netx10_monitor = env_netx10_monitor.Elf(os.path.join(strTargetPath, 'uartmon_netx10_monitor.elf'), src_netx10_monitor + env_netx10_monitor['PLATFORM_LIBRARY'] + libmi_netx10)
bin_netx10_monitor = env_netx10_monitor.ObjCopy(os.path.join(strTargetPath, 'uartmon_netx10_monitor.bin'), elf_netx10_monitor)
UARTMON_NETX10 = env_netx10_monitor.DataArray(os.path.join(strTargetPath, 'uartmon_netx10_monitor.c'), bin_netx10_monitor, DATAARRAY_NAME='auc_uartmon_netx10_monitor')
UARTMON_NETX10_SYM = env_netx10_monitor.GccSymbolTemplate(os.path.join(strTargetPath, 'uartmon_netx10_monitor_run.h'), elf_netx10_monitor, GCCSYMBOLTEMPLATE_TEMPLATE=File('templates/uartmon_netx10_monitor_run.h'))
Export('UARTMON_NETX10', 'UARTMON_NETX10_SYM')

env_netx10_bootstrap = atEnv.NETX10_THUMB.Clone()
env_netx10_bootstrap.Replace(LDFILE = File('src/netx10/netx10_bootstrap.ld'))
env_netx10_bootstrap.Append(CPPPATH = ['src', '../../machine_interface/netx/src', '#platform/src', '#platform/src/lib', '#targets/plugins/romloader/uart/netx'])
src_netx10_bootstrap = env_netx10_bootstrap.SetBuildPath(os.path.join(strTargetPath, 'netx10_bootstrap'), 'src', sources_bootstrap)
elf_netx10_bootstrap = env_netx10_bootstrap.Elf(os.path.join(strTargetPath, 'uartmon_netx10_bootstrap.elf'), src_netx10_bootstrap)
bin_netx10_bootstrap = env_netx10_bootstrap.ObjCopy(os.path.join(strTargetPath, 'uartmon_netx10_bootstrap.bin'), elf_netx10_bootstrap)
UARTMON_BOOTSTRAP_NETX10 = env_netx10_bootstrap.DataArray(os.path.join(strTargetPath, 'uartmon_netx10_bootstrap.c'), bin_netx10_bootstrap, DATAARRAY_NAME='auc_uartmon_netx10_bootstrap')
UARTMON_BOOTSTRAP_NETX10_SYM = env_netx10_bootstrap.GccSymbolTemplate(os.path.join(strTargetPath, 'uartmon_netx10_bootstrap_run.h'), elf_netx10_bootstrap, GCCSYMBOLTEMPLATE_TEMPLATE=File('templates/uartmon_netx10_bootstrap_run.h'))
Export('UARTMON_BOOTSTRAP_NETX10', 'UARTMON_BOOTSTRAP_NETX10_SYM')

#----------------------------------------------------------------------------
#
# Build the netX4000 files.
#
env_netx4000_monitor = atEnv.NETX4000.Clone()
env_netx4000_monitor.Append(CPPPATH = ['src', '../../machine_interface/netx/src', '#platform/src', '#platform/src/lib'])
env_netx4000_monitor.Replace(LDFILE = File('src/netx4000/netx4000.ld'))
src_netx4000_monitor = env_netx4000_monitor.SetBuildPath(os.path.join(strTargetPath, 'netx4000_monitor'), 'src', sources_monitor + sources_monitor_netx4000)
elf_netx4000_monitor = env_netx4000_monitor.Elf(os.path.join(strTargetPath, 'uartmon_netx4000_monitor.elf'), src_netx4000_monitor + env_netx4000_monitor['PLATFORM_LIBRARY'] + libmi_netx4000)
bin_netx4000_monitor = env_netx4000_monitor.ObjCopy(os.path.join(strTargetPath, 'uartmon_netx4000_monitor.bin'), elf_netx4000_monitor)
UARTMON_NETX4000 = env_netx4000_monitor.DataArray(os.path.join(strTargetPath, 'uartmon_netx4000_monitor.c'), bin_netx4000_monitor, DATAARRAY_NAME='auc_uartmon_netx4000_monitor')
UARTMON_NETX4000_SYM = env_netx4000_monitor.GccSymbolTemplate(os.path.join(strTargetPath, 'uartmon_netx4000_monitor_run.h'), elf_netx4000_monitor, GCCSYMBOLTEMPLATE_TEMPLATE=File('templates/uartmon_netx4000_monitor_run.h'))
Export('UARTMON_NETX4000', 'UARTMON_NETX4000_SYM')
