# -*- coding: utf-8 -*-
#-------------------------------------------------------------------------#
#   Copyright (C) 2011 by Christoph Thelen                                #
#   doc_bacardi@users.sourceforge.net                                     #
#                                                                         #
#   This program is free software; you can redistribute it and/or modify  #
#   it under the terms of the GNU General Public License as published by  #
#   the Free Software Foundation; either version 2 of the License, or     #
#   (at your option) any later version.                                   #
#                                                                         #
#   This program is distributed in the hope that it will be useful,       #
#   but WITHOUT ANY WARRANTY; without even the implied warranty of        #
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         #
#   GNU General Public License for more details.                          #
#                                                                         #
#   You should have received a copy of the GNU General Public License     #
#   along with this program; if not, write to the                         #
#   Free Software Foundation, Inc.,                                       #
#   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             #
#-------------------------------------------------------------------------#


#----------------------------------------------------------------------------
#
# Import the default compiler environments and the platform libraries.
#
Import('atEnv')
Import('libmi_netx500', 'libmi_netx56', 'libmi_netx50', 'libmi_netx10', 'libmi_netx4000')
import os.path

#----------------------------------------------------------------------------
# This is the list of sources. The elements must be separated with whitespace
# (i.e. spaces, tabs, newlines). The amount of whitespace does not matter.
sources_monitor = """
	src/init_netx_test.S
	src/main.c
	src/transport.c
"""

strTargetPath = Dir('#targets/plugins/romloader/dpm/netx').get_path()

#----------------------------------------------------------------------------
#
# Build the netX56 files.
#
env_netx56_monitor = atEnv.NETX56.Clone()
env_netx56_monitor.Replace(BOOTBLOCK_CHIPTYPE = 56)
env_netx56_monitor.Append(CPPPATH = ['src', '../../machine_interface/netx/src', '#platform/src', '#platform/src/lib'])
env_netx56_monitor.Replace(LDFILE = File('src/netx56/netx56.ld'))
src_netx56_monitor = env_netx56_monitor.SetBuildPath(os.path.join(strTargetPath, 'netx56_monitor'), 'src', sources_monitor)
elf_netx56_monitor = env_netx56_monitor.Elf(os.path.join(strTargetPath, 'dpmmon_netx56_monitor.elf'), src_netx56_monitor + env_netx56_monitor['PLATFORM_LIBRARY'] + libmi_netx56)
bb0_netx56_monitor = env_netx56_monitor.BootBlock(os.path.join(strTargetPath, 'dpmmon_netx56_monitor.img'), elf_netx56_monitor, BOOTBLOCK_SRC='DPM', BOOTBLOCK_DST='INTRAM')
arr_netx56_monitor = env_netx56_monitor.DataArray(os.path.join(strTargetPath, 'dpmmon_netx56_monitor.c'), bb0_netx56_monitor, DATAARRAY_NAME='auc_dpmmon_netx56_monitor')
sym_netx56_monitor = env_netx56_monitor.GccSymbolTemplate(os.path.join(strTargetPath, 'dpmmon_netx56_monitor_run.h'), elf_netx56_monitor, GCCSYMBOLTEMPLATE_TEMPLATE=File('templates/dpmmon_netx56_monitor_run.h'))

#----------------------------------------------------------------------------
#
# Build the netX4000 files.
#
env_netx4000_monitor = atEnv.NETX4000.Clone()
env_netx4000_monitor.Replace(BOOTBLOCK_CHIPTYPE = 4000)
env_netx4000_monitor.Append(CPPPATH = ['src', '../../machine_interface/netx/src', '#platform/src', '#platform/src/lib'])
env_netx4000_monitor.Replace(LDFILE = File('src/netx4000/netx4000.ld'))
src_netx4000_monitor = env_netx4000_monitor.SetBuildPath(os.path.join(strTargetPath, 'netx4000_monitor'), 'src', sources_monitor)
elf_netx4000_monitor = env_netx4000_monitor.Elf(os.path.join(strTargetPath, 'dpmmon_netx4000_monitor.elf'), src_netx4000_monitor + env_netx4000_monitor['PLATFORM_LIBRARY'] + libmi_netx4000)
bb0_netx4000_monitor = env_netx4000_monitor.HBootImage(os.path.join(strTargetPath, 'dpmmon_netx4000_monitor.img'), 'src/netx4000/CR7_to_INTRAM.xml', HBOOTIMAGE_KNOWN_FILES=dict({'tElfCR7': elf_netx4000_monitor}))
arr_netx4000_monitor = env_netx4000_monitor.DataArray(os.path.join(strTargetPath, 'dpmmon_netx4000_monitor.c'), bb0_netx4000_monitor, DATAARRAY_NAME='auc_dpmmon_netx4000_monitor')
sym_netx4000_monitor = env_netx4000_monitor.GccSymbolTemplate(os.path.join(strTargetPath, 'dpmmon_netx4000_monitor_run.h'), elf_netx4000_monitor, GCCSYMBOLTEMPLATE_TEMPLATE=File('templates/dpmmon_netx4000_monitor_run.h'))

