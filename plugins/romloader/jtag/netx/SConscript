# -*- coding: utf-8 -*-
#-------------------------------------------------------------------------#
#   Copyright (C) 2011 by Christoph Thelen                                #
#   doc_bacardi@users.sourceforge.net                                     #
#                                                                         #
#   This program is free software; you can redistribute it and/or modify  #
#   it under the terms of the GNU General Public License as published by  #
#   the Free Software Foundation; either version 2 of the License, or     #
#   (at your option) any later version.                                   #
#                                                                         #
#   This program is distributed in the hope that it will be useful,       #
#   but WITHOUT ANY WARRANTY; without even the implied warranty of        #
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         #
#   GNU General Public License for more details.                          #
#                                                                         #
#   You should have received a copy of the GNU General Public License     #
#   along with this program; if not, write to the                         #
#   Free Software Foundation, Inc.,                                       #
#   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             #
#-------------------------------------------------------------------------#


#----------------------------------------------------------------------------
#
# Import the default compiler environments and the platform libraries.
#
Import('atEnv')
import os.path

#----------------------------------------------------------------------------
# This is the list of sources. The elements must be separated with whitespace
# (i.e. spaces, tabs, newlines). The amount of whitespace does not matter.
sources = """
	src/dcc_io_asm.S
	src/dcc_io.c
"""

aCppPath = ['src', '#platform/src']
strTargetPath = Dir('#targets/plugins/romloader/jtag/netx').get_path()

#----------------------------------------------------------------------------

def build_elf_bin(pars):
	target_path = pars.target_dir + '/' + pars.target_name
	env = pars.env.Clone()
	env.Replace(LDFILE = pars.ldfile)
	env.Append(CPPPATH = aCppPath)
	env.Append(CPPPATH = pars.cpppath)
	env.Append(CPPDEFINES = pars.defines)
	
	src = env.SetBuildPath(pars.target_dir, 'src', pars.sources)
	elf = env.Elf(    target_path + '.elf', src + env['PLATFORM_LIBRARY'])
	txt = env.ObjDump(target_path + '.txt', elf, OBJDUMP_FLAGS=['--disassemble', '--source', '--all-headers', '--wide'])
	bin = env.ObjCopy(target_path + '.bin', elf)
	#sym_netx500_dcc = env_netx500_dcc.GccSymbolTemplate(os.path.join(strTargetPath, 'netx500_dcc_run.h'), elf_netx500_dcc, GCCSYMBOLTEMPLATE_TEMPLATE=File('templates/netx500_dcc_run.h'))
	return bin

# build binary for netx 500/100
class buildpars:
	env         = atEnv.NETX500
	cpppath     = []
	sources     = sources
	defines     = []
	ldfile      = 'src/netx500.ld'
	target_dir  = strTargetPath + '/netx500'
	target_name = 'dcc_netx500'
DCC_NETX500 = build_elf_bin(buildpars)
Export('DCC_NETX500')

# build binary for netx 10_50_51_52 
buildpars.env         = atEnv.NETX50
buildpars.ldfile      = 'src/netx10_50_51_52.ld'
buildpars.target_dir  = strTargetPath + '/netx10_50_51_52'
buildpars.target_name = 'dcc_netx10_50_51_52' 
DCC_NETX10_50_56 = build_elf_bin(buildpars)
Export('DCC_NETX10_50_56')

# build netx 4000/R7 binary
buildpars.env         = atEnv.NETX4000
buildpars.ldfile      = 'src/netx4000.ld'
buildpars.target_dir  = strTargetPath + '/netx4000'
buildpars.target_name = 'dcc_netx4000_cr7' 
DCC_NETX4000 = build_elf_bin(buildpars)
Export('DCC_NETX4000')

# build netx 90 COM binary
buildpars.env         = atEnv.NETX90
buildpars.ldfile      = 'src/netx90.ld'
buildpars.target_dir  = strTargetPath + '/netx90'
buildpars.target_name = 'dcc_netx90_com' 
DCC_NETX90 = build_elf_bin(buildpars)
Export('DCC_NETX90')
