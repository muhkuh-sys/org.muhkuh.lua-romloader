# -*- coding: utf-8 -*-
#-------------------------------------------------------------------------#
#   Copyright (C) 2011 by Christoph Thelen                                #
#   doc_bacardi@users.sourceforge.net                                     #
#                                                                         #
#   This program is free software; you can redistribute it and/or modify  #
#   it under the terms of the GNU General Public License as published by  #
#   the Free Software Foundation; either version 2 of the License, or     #
#   (at your option) any later version.                                   #
#                                                                         #
#   This program is distributed in the hope that it will be useful,       #
#   but WITHOUT ANY WARRANTY; without even the implied warranty of        #
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         #
#   GNU General Public License for more details.                          #
#                                                                         #
#   You should have received a copy of the GNU General Public License     #
#   along with this program; if not, write to the                         #
#   Free Software Foundation, Inc.,                                       #
#   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             #
#-------------------------------------------------------------------------#


#----------------------------------------------------------------------------
#
# Import the default compiler environments.
#
Import('atEnv')
import os.path

#----------------------------------------------------------------------------
#
# Build the files.
#
montest_sources = """
	src/header.S
	src/init_netx_test.S
	src/main.c
"""

astrCppPath = ['#platform/src', '#platform/src/lib']
strTargetPath = Dir('#targets/plugins/romloader/_test/testcode').get_path()

env_netx500 = atEnv.NETX500.Clone()
env_netx500.Append(CPPPATH = astrCppPath)
env_netx500.Replace(LDFILE = File('src/netx500/netx500.ld'))
src_netx500 = env_netx500.SetBuildPath(os.path.join(strTargetPath, 'netx500'), 'src', montest_sources)
elf_netx500 = env_netx500.Elf(os.path.join(strTargetPath, 'montest_netx500.elf'), src_netx500 + env_netx500['PLATFORM_LIBRARY'])
bin_netx500 = env_netx500.ObjCopy(os.path.join(strTargetPath, 'montest_netx500.bin'), elf_netx500)

env_netx56 = atEnv.NETX56.Clone()
env_netx56.Append(CPPPATH = astrCppPath)
env_netx56.Replace(LDFILE = File('src/netx56/netx56.ld'))
src_netx56 = env_netx56.SetBuildPath(os.path.join(strTargetPath, 'netx56'), 'src', montest_sources)
elf_netx56 = env_netx56.Elf(os.path.join(strTargetPath, 'montest_netx56.elf'), src_netx56 + env_netx56['PLATFORM_LIBRARY'])
bin_netx56 = env_netx56.ObjCopy(os.path.join(strTargetPath, 'montest_netx56.bin'), elf_netx56)

env_netx4000 = atEnv.NETX4000.Clone()
env_netx4000.Append(CPPPATH = astrCppPath)
env_netx4000.Replace(LDFILE = File('src/netx4000/netx4000.ld'))
src_netx4000 = env_netx4000.SetBuildPath(os.path.join(strTargetPath, 'netx4000'), 'src', montest_sources)
elf_netx4000 = env_netx4000.Elf(os.path.join(strTargetPath, 'montest_netx4000.elf'), src_netx4000 + env_netx4000['PLATFORM_LIBRARY'])
bin_netx4000 = env_netx4000.ObjCopy(os.path.join(strTargetPath, 'montest_netx4000.bin'), elf_netx4000)

env_netx50 = atEnv.NETX50.Clone()
env_netx50.Append(CPPPATH = astrCppPath)
env_netx50.Replace(LDFILE = File('src/netx50/netx50.ld'))
src_netx50 = env_netx50.SetBuildPath(os.path.join(strTargetPath, 'netx50'), 'src', montest_sources)
elf_netx50 = env_netx50.Elf(os.path.join(strTargetPath, 'montest_netx50.elf'), src_netx50 + env_netx50['PLATFORM_LIBRARY'])
bin_netx50 = env_netx50.ObjCopy(os.path.join(strTargetPath, 'montest_netx50.bin'), elf_netx50)

env_netx10 = atEnv.NETX10.Clone()
env_netx10.Append(CPPPATH = astrCppPath)
env_netx10.Replace(LDFILE = File('src/netx10/netx10.ld'))
src_netx10 = env_netx10.SetBuildPath(os.path.join(strTargetPath, 'netx10'), 'src', montest_sources)
elf_netx10 = env_netx10.Elf(os.path.join(strTargetPath, 'montest_netx10.elf'), src_netx10 + env_netx10['PLATFORM_LIBRARY'])
bin_netx10 = env_netx10.ObjCopy(os.path.join(strTargetPath, 'montest_netx10.bin'), elf_netx10)

env_netx90_mpw = atEnv.NETX90_MPW.Clone()
env_netx90_mpw.Append(CPPPATH = astrCppPath)
env_netx90_mpw.Replace(LDFILE = File('src/netx90/netx90.ld'))
src_netx90_mpw = env_netx90_mpw.SetBuildPath(os.path.join(strTargetPath, 'netx90_mpw'), 'src', montest_sources)
elf_netx90_mpw = env_netx90_mpw.Elf(os.path.join(strTargetPath, 'montest_netx90_mpw.elf'), src_netx90_mpw + env_netx90_mpw['PLATFORM_LIBRARY'])
bin_netx90_mpw = env_netx90_mpw.ObjCopy(os.path.join(strTargetPath, 'montest_netx90_mpw.bin'), elf_netx90_mpw)
txt_netx90_mpw = env_netx90_mpw.ObjDump(os.path.join(strTargetPath, 'montest_netx90_mpw.txt'), elf_netx90_mpw, OBJDUMP_FLAGS=['--disassemble', '--source', '--all-headers', '--wide'])

env_netx90 = atEnv.NETX90.Clone()
env_netx90.Append(CPPPATH = astrCppPath)
env_netx90.Replace(LDFILE = File('src/netx90/netx90.ld'))
src_netx90 = env_netx90.SetBuildPath(os.path.join(strTargetPath, 'netx90'), 'src', montest_sources)
elf_netx90 = env_netx90.Elf(os.path.join(strTargetPath, 'montest_netx90.elf'), src_netx90 + env_netx90['PLATFORM_LIBRARY'])
bin_netx90 = env_netx90.ObjCopy(os.path.join(strTargetPath, 'montest_netx90.bin'), elf_netx90)
txt_netx90 = env_netx90.ObjDump(os.path.join(strTargetPath, 'montest_netx90.txt'), elf_netx90, OBJDUMP_FLAGS=['--disassemble', '--source', '--all-headers', '--wide'])

env_netiol = atEnv.NETIOL.Clone()
env_netiol.Append(CPPPATH = astrCppPath)
env_netiol.Replace(LDFILE = File('src/netiol/netiol.ld'))
env_netiol.Replace(LIBS = ['c'])  # default library selection for RiscV is incorrect
src_netiol = env_netiol.SetBuildPath(os.path.join(strTargetPath, 'netiol'), 'src', montest_sources)
elf_netiol = env_netiol.Elf(os.path.join(strTargetPath, 'montest_netiol.elf'), src_netiol + env_netiol['PLATFORM_LIBRARY'])
bin_netiol = env_netiol.ObjCopy(os.path.join(strTargetPath, 'montest_netiol.bin'), elf_netiol)
txt_netiol = env_netiol.ObjDump(os.path.join(strTargetPath, 'montest_netiol.txt'), elf_netiol, OBJDUMP_FLAGS=['--disassemble', '--source', '--all-headers', '--wide'])
