# -*- coding: utf-8 -*-
#-------------------------------------------------------------------------#
#   Copyright (C) 2011 by Christoph Thelen                                #
#   doc_bacardi@users.sourceforge.net                                     #
#                                                                         #
#   This program is free software; you can redistribute it and/or modify  #
#   it under the terms of the GNU General Public License as published by  #
#   the Free Software Foundation; either version 2 of the License, or     #
#   (at your option) any later version.                                   #
#                                                                         #
#   This program is distributed in the hope that it will be useful,       #
#   but WITHOUT ANY WARRANTY; without even the implied warranty of        #
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         #
#   GNU General Public License for more details.                          #
#                                                                         #
#   You should have received a copy of the GNU General Public License     #
#   along with this program; if not, write to the                         #
#   Free Software Foundation, Inc.,                                       #
#   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             #
#-------------------------------------------------------------------------#


#----------------------------------------------------------------------------
#
# Import the default compiler environments.
#
Import('atEnv')
import os.path


#----------------------------------------------------------------------------
# This is the list of sources. The elements must be separated with whitespace
# (i.e. spaces, tabs, newlines). The amount of whitespace does not matter.
sources = """
	src/monitor.c
"""

astrCppPaths = ['src', '#platform/src', '#platform/src/lib']
strTargetPath = Dir('#targets/plugins/romloader/machine_interface/netx').get_path()


#----------------------------------------------------------------------------
#
# Build the netX500 files.
#
env_netx500 = atEnv.NETX500.Clone()
env_netx500.Append(CPPPATH = astrCppPaths)
src_netx500 = env_netx500.SetBuildPath(os.path.join(strTargetPath, 'netx500'), 'src', sources)
libmi_netx500 = env_netx500.StaticLibrary(os.path.join(strTargetPath, 'libmi_netx500.a'), src_netx500)


#----------------------------------------------------------------------------
#
# Build the netX56 files.
#
env_netx56 = atEnv.NETX56.Clone()
env_netx56.Append(CPPPATH = astrCppPaths)
src_netx56 = env_netx56.SetBuildPath(os.path.join(strTargetPath, 'netx56_monitor'), 'src', sources)
libmi_netx56 = env_netx56.StaticLibrary(os.path.join(strTargetPath, 'libmi_netx56.a'), src_netx56)

#----------------------------------------------------------------------------
#
# Build the netX4000 files.
#
env_netx4000 = atEnv.NETX4000.Clone()
env_netx4000.Append(CPPPATH = astrCppPaths)
src_netx4000 = env_netx4000.SetBuildPath(os.path.join(strTargetPath, 'netx4000_monitor'), 'src', sources)
libmi_netx4000 = env_netx4000.StaticLibrary(os.path.join(strTargetPath, 'libmi_netx4000.a'), src_netx4000)


#----------------------------------------------------------------------------
#
# Build the netX50 files.
#
env_netx50 = atEnv.NETX50.Clone()
env_netx50.Append(CPPPATH = astrCppPaths)
src_netx50 = env_netx50.SetBuildPath(os.path.join(strTargetPath, 'netx50_monitor'), 'src', sources)
libmi_netx50 = env_netx50.StaticLibrary(os.path.join(strTargetPath, 'libmi_netx50.a'), src_netx50)


#----------------------------------------------------------------------------
#
# Build the netX10 files.
#
env_netx10 = atEnv.NETX10.Clone()
env_netx10.Append(CPPPATH = astrCppPaths)
src_netx10 = env_netx10.SetBuildPath(os.path.join(strTargetPath, 'netx10_monitor'), 'src', sources)
libmi_netx10 = env_netx10.StaticLibrary(os.path.join(strTargetPath, 'libmi_netx10.a'), src_netx10)


#----------------------------------------------------------------------------
#
# Export all libraries.
#
Export('libmi_netx500', 'libmi_netx56', 'libmi_netx50', 'libmi_netx10', 'libmi_netx4000')
